xml = Builder::XmlMarkup.new
xml.instruct!
xml.schedule do
  xml.conference do
    xml.title @conference.title
    xml.subtitle @conference.subtitle
    xml.venue @conference.venue
    xml.city @conference.city
    xml.start @conference.start_date.strftime('%Y-%m-%d')
    xml.end((@conference.start_date + @conference.days - 1).strftime('%Y-%m-%d') )
    xml.days @conference.days
    xml.day_change @conference.day_change.strftime('%H:%M')
    xml.timeslot_duration @conference.timeslot_duration.strftime('%H:%M')
  end
  @conference.days.times do | day |
    day += 1
    xml.day({:index=>day}) do
      @rooms.each do | room |
        xml.room({:name => room.name}) do
          room_events = {}
          @events.each_by_value({:day => day, :room_id => room.room_id}) do | event |
            next if room_events.values.member?( event.event_id )
            room_events[event.start_time.strftime('%H:%M')] = event.event_id
          end

          room_events.keys.sort.each do | start_time |
            event_id = room_events[start_time]
            @events.find_by_value(:event_id => event_id)
            xml.event({:id=>event_id}) do
              xml.start @events.start_time.strftime('%H:%M')
              xml.duration @events.duration.strftime('%H:%M')
              xml.title @events.title
              xml.subtitle @events.subtitle
              xml.track @events.conference_track
              xml.abstract @events.abstract
              xml.description @events.description
              @events.each_by_value(:event_id => event_id) do | speaker |
                xml.person speaker.name
              end
            end
          end

        end
      end
    end
  end

end
