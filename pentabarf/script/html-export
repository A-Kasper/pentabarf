#!/usr/bin/env ruby
require 'yaml'
require 'lib/momomoto/momomoto'
require 'lib/momomoto/tables'
require 'lib/momomoto/views'
require 'app/helpers/application_helper'
require 'app/helpers/schedule_helper'
require 'rubygems'
require 'action_view'
require 'lib/builder_escape_attributes'
require 'erb'
require 'RMagick'
require 'uri'

if ARGV.length != 1
  puts "Usage: #{$0} <conference>\n\n<conference> can either be a conference_id or the conference acronym.\n"
  exit
end


class HTML_Export
  include ERB::Util
  include ApplicationHelper
  include ScheduleHelper

  IMAGE_SIZES = [32,48,128]

  LOCK_FILE = '.lockfile'

  def initialize( conference )
    @rails_root = Dir.getwd
    Momomoto::Base.connect(YAML::load_file("config/database.yml")['production'])
    @conference = Momomoto::Conference.find({:conference_id=>conference}) if conference.to_s.match(/^\d+$/)
    @conference = Momomoto::Conference.find({:acronym=>conference}) unless @conference
    raise ArgumentError, "Conference '#{conference}' not found" unless @conference.length == 1
    @timezone = 'Europe/Berlin'
    @languages = Momomoto::View_conference_language.find({:conference_id=>@conference.conference_id,:translated_id=>120})
    raise ArgumentError, "no conference language set to export to." unless @languages.length > 0
    Dir.chdir("#{@rails_root}/tmp/html-export")
    begin
      Dir.chdir(conference.to_s)
    rescue Errno::ENOENT
      Dir.mkdir(conference.to_s)
      Dir.chdir(conference.to_s)
    end
    raise StandardError, "this conference is currently being exported" if File.exist?( LOCK_FILE )
    File.new( LOCK_FILE, File::CREAT )
    @template_cache = {}
  end

  def render( options )
    if options == 'ical'
      @content_for_layout = render_template( "#{@rails_root}/app/views/ical/conference.rhtml" )
      render_template("#{@rails_root}/app/views/layouts/ical.rhtml")
    elsif options == 'xml'
      render_template( "#{@rails_root}/app/views/xml/schedule.rxml" )
    elsif options == 'xcal'
      @content_for_layout = render_template( "#{@rails_root}/app/views/xcal/conference.rhtml" )
      render_template("#{@rails_root}/app/views/layouts/xcal.rhtml")
    elsif ['day','days','index','event','events','speaker','speakers'].member?( options )
      @content_for_layout = render_template( "#{@rails_root}/app/views/schedule/#{options}.rxml" )
      render_template("#{@rails_root}/app/views/layouts/schedule.rxml")
    elsif options.is_a?(String)
      @content_for_layout = render_template( "#{@rails_root}/app/views/schedule/#{options}.rhtml" )
      render_template("#{@rails_root}/app/views/layouts/schedule.rxml")
    elsif options.is_a?(Hash) && options[:partial]
      render_template( "#{@rails_root}/app/views/schedule/_#{options[:partial]}.rxml" )
    else
      "unknown options for render #{options.inspect}"
    end
  end

  def render_template( filename )
    if not @template_cache[filename]
      raise ArgumentError, "file #{filename} does not exist." unless File.exist?(filename)
      if filename.match(/\.rhtml/)
        render_erb_template( filename )
      elsif filename.match( filename )
        render_xml_template( filename )
      else
        raise "Unknown filename #{filename}"
      end
    end
    eval( @template_cache[filename], binding )
  end

  def render_erb_template( filename )
    template = ERB.new( localize( File.new( filename, "r" ).read ) )
    @template_cache[filename] = template.src
  end

  def render_xml_template( filename )
    @template_cache[filename] = ( localize( File.new( filename, "r" ).read ) )
  end

  def export
    write_file( "stylesheet.css", @conference.css )
    make_images = true

    Dir.mkdir('images') unless File.exist?('images')
    Dir.mkdir('events') unless File.exist?('events')
    Dir.mkdir('speakers') unless File.exist?('speakers')
    Dir.mkdir('attachments') unless File.exist?('attachments')

    puts "writing attachments"
    @attachments = Momomoto::View_event_attachment.find({:conference_id => @conference.conference_id, :f_public => 't'})
    @attachments.each do | a |
      file = Momomoto::Event_attachment.find({:event_attachment_id=>a.event_attachment_id,:f_public=>'t',:filename=>true})
      write_file("attachments/#{file.event_attachment_id}-#{file.filename}", file.data) unless file.nil?
    end

    puts "writing conference images"
    image = Momomoto::Conference_image.find({:conference_id=>@conference.conference_id})
    image = image.length == 1 ? image.image : File.new( @rails_root + '/public/images/icon-conference-128x128.png').read
    IMAGE_SIZES.each do | size |
      write_file("images/conference-#{size}x#{size}.png", resize_image( image, size, 'PNG' ) )
    end

    # export loop for each language
    @languages.each do | @language |
      puts "creating files for language #{@language.tag}"
      @content_title = @conference.subtitle
      @template_cache = {}
      @rooms = Momomoto::View_room.find({:conference_id=>@conference.conference_id, :language_id => @language.language_id, :f_public => 't'}, nil, 'rank')
      @events = Momomoto::View_schedule_event.find({:conference_id=>@conference.conference_id,:translated_id=>@language.language_id}, nil, 'lower(title),lower(subtitle)' )
      @speakers = Momomoto::View_schedule_person.find({:conference_id=>@conference.conference_id})

      write_file("schedule.#{@language.tag}.ics", fold(render('ical')))
      write_file("schedule.#{@language.tag}.xcs", render('xcal'))
      write_file("schedule.#{@language.tag}.xml", render('xml'))
      write_file("index.#{@language.tag}.html", render('index'))

      # create schedule tables for every day
      @conference.days.times do | day |
        @day = day + 1
        write_file("day_#{@day}.#{@language.tag}.html", render('day'))
      end

      write_file("days.#{@language.tag}.html", render('days'))
      write_file("speakers.#{@language.tag}.html", render('speakers'))
      write_file("events.#{@language.tag}.html", render('events'))

      # create all event pages and event images
      puts "  creating event files"
      @events.each_unique(:event_id) do | event |
        @content_title = event.title
        @event = Momomoto::View_event.find({:event_id=>event.event_id,:translated_id=>@language.language_id})
        if make_images
          image = Momomoto::Event_image.find({:event_id=>event.event_id})
          image = image.length == 1 ? image.image : File.new( @rails_root + '/public/images/icon-event-128x128.png').read
          IMAGE_SIZES.each do | size |
            write_file("images/event-#{@event.event_id}-#{size}x#{size}.png", resize_image( image, size, 'PNG' ) )
          end
        end
        write_file("events/#{@event.event_id}.#{@language.tag}.html", render('event') )
      end

      # create all speaker pages and images
      puts "  creating speaker files"
      @speakers.each_unique(:person_id) do | @speaker |
        @person = @speaker
        @content_title = @speaker.name
        if make_images
          image = Momomoto::Person_image.find({:person_id=>@speaker.person_id})
          image = image.length == 1 && image.f_public ? image.image : File.new( @rails_root + '/public/images/icon-person-128x128.png').read
          IMAGE_SIZES.each do | size |
            write_file("images/speaker-#{@speaker.person_id}-#{size}x#{size}.jpg", resize_image( image, size, 'JPG' ) )
          end
        end
        write_file("speakers/#{@speaker.person_id}.#{@language.tag}.html", render('speaker'))
      end
      make_images = false
    end
    puts "Export done."
  end

  def method_missing( name )
    "<b>missing method #{name}</b>"
  end

  def write_file( filename, content )
    file = File.open( filename , File::CREAT | File::WRONLY | File::TRUNC )
    file.write( content )
    file.close
  end

  def resize_image( image, size, format = nil )
    resized = Magick::Image.from_blob( image )[0]
    resized.x_resolution = 72
    resized.y_resolution = 72
    resized.format = format if format
    resized.resize!( size, size ).strip!.to_blob
  end

  def url_for( url )
    base = URI.parse(@conference.export_base_url).path
    if url[:controller]
      if url[:controller].to_sym == :image
        return "#{base}images/#{url[:action]}-128x128.png" if url[:action] ==:conference
        url[:action] = :speaker if url[:action] == :person
        return "#{base}images/#{url[:action]}#{url[:id] && url[:id] != 0 ? '-' + url[:id].to_s : ''}"
      elsif url[:controller].to_sym == :file
        return "" unless @attachments.find_by_value({:event_attachment_id=>url[:id]})
        return "#{base}attachments/#{@attachments.event_attachment_id}-#{@attachments.filename}"
      elsif url[:controller].to_sym == :feedback
        return "#{@conference.feedback_base_url}feedback/#{@conference.acronym}/event/#{url[:id]}.#{@language.tag}.html"
      elsif url[:controller].to_sym == :ical
        return "#{base}schedule.#{@language.tag}.ics"
      elsif url[:controller].to_sym == :xcal
        return "#{base}schedule.#{@language.tag}.xcs"
      elsif url[:controller].to_sym == :xml
        return "#{base}schedule.#{@language.tag}.xml"
      end
    else
      return case url[:action]
        when :speaker then "#{base}speakers/#{url[:id]}.#{@language.tag}.html"
        when :speakers then "#{base}speakers.#{@language.tag}.html"
        when :event then "#{base}events/#{url[:id]}.#{@language.tag}.html"
        when :events then "#{base}events.#{@language.tag}.html"
        when :css then "#{base}stylesheet.css"
        when :day then "#{base}day_#{url[:id]}.#{@language.tag}.html"
        when :days then "#{base}days.#{@language.tag}.html"
        when :index then "#{base}index.#{@language.tag}.html"
        else "unkown url #{url.inspect}" end
    end
    raise "unkown url #{url.inspect}"
  end

  def localize( template )
    # lets do some localization
    template.gsub!('-%>', '%>')
    tags = template.to_s.scan(/<\[[a-z:_]+\]>/)
    tags.collect do | tag |
      tag.delete!("<[]>")
    end
    if tags.length > 0
      Momomoto::View_ui_message.find({:language_id => @language.language_id, :tag => tags}).each do | msg |
        next if msg.name.match(/[{}<>]/)
        template.gsub!( "<[" + msg.tag + "]>", h(msg.name) )
      end
    end
    template
  end

  def person_image( person_id = 0, size = 32, extension = nil )
    base = URI.parse(@conference.export_base_url).path
    size = 500 if size > 500
    "#{base}images/speaker#{person_id != 0 ? '-' + person_id.to_s : '' }-#{size}x#{size}" + ( extension ? ".#{extension}" : '.jpg')
  end

  def event_image( event_id = 0, size = 32, extension = nil )
    base = URI.parse(@conference.export_base_url).path
    size = 500 if size > 500
    "#{base}images/event#{event_id != 0 ? '-' + event_id.to_s : '' }-#{size}x#{size}" + ( extension ? ".#{extension}" : '.png')
  end

  def human_size( size )
    begin
      return "%d Bytes" % size                if size < 1024
      return "%.1f KB" % (size/1024).to_f if size < 1024 * 1024
      return "%.1f MB" % (size/(1024*1024)).to_f if size < 1024 * 1024 * 1024
      return "%.1f GB" % (size/(1024*1024*1024)).to_f if size < 1024 * 1024 * 1024 * 1024
      return "%.1f TB" % (size/(1024*1024*1024*1024)).to_f
    rescue
      # just return nothing
    end
  end

  def cleanup
    File.delete( LOCK_FILE )
  end

  def fold( message )
    max_octets = 70
    folded_body = ""
    message.each_line do | line |
      next if line == ""
      while line.length > max_octets do
        folded_body += line[0..(max_octets - 1)]
        folded_body += "\r\n "
        line = line[max_octets..line.length]
      end
      folded_body += line
    end
    folded_body
  end

end

export = HTML_Export.new(ARGV[0])
begin
  export.export
  export.cleanup
rescue => e
  export.cleanup
  raise e
end

