#!/usr/bin/env ruby

require 'webrick'
require 'optparse'

OPTIONS = {
  :port        => 2342,
  :ip          => "0.0.0.0",
  :environment => "development",
  :server_root => File.expand_path(File.dirname(__FILE__) + "/../public/"),
  :server_type => WEBrick::SimpleServer
}

ARGV.options do |opts|
  script_name = File.basename($0)
  opts.banner = "Usage: ruby #{script_name} [options]"

  opts.separator ""

  opts.on("-p", "--port=port", Integer,
          "Runs Rails on the specified port.",
          "Default: 3000") { |OPTIONS[:port]| }
  opts.on("-b", "--binding=ip", String,
          "Binds Rails to the specified ip.",
          "Default: 0.0.0.0") { |OPTIONS[:ip]| }
  opts.on("-e", "--environment=name", String,
          "Specifies the environment to run this server under (test/development/production).",
          "Default: development") { |OPTIONS[:environment]| }
  opts.on("-d", "--daemon",
          "Make Rails run as a Daemon (only works if fork is available -- meaning on *nix)."
          ) { OPTIONS[:server_type] = WEBrick::Daemon }

  opts.separator ""

  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }

  opts.parse!
end

ENV["RAILS_ENV"] = OPTIONS[:environment]
require File.dirname(__FILE__) + "/../config/environment"
require 'webrick_server'
require 'webrick/https'

OPTIONS['working_directory'] = File.expand_path(RAILS_ROOT)

class SSLDispatchServlet < DispatchServlet
  def self.dispatch(options)
    Socket.do_not_reverse_lookup = true # patch for OS X
    server = WEBrick::HTTPServer.new(
        :Port            => options[:port].to_i,
        :ServerType      => options[:server_type],
        :BindAddress     => options[:ip],
        :SSLEnable       => true,
        :SSLVerifyClient => ::OpenSSL::SSL::VERIFY_NONE,
        :SSLCertName => [ ["C","DE"], ["O","Persons in a Position to Know, Inc."], ["CN", "pentabarf.cccv.de"] ]
    )
    server.mount('/', DispatchServlet, options)
    trap("INT") { server.shutdown }
    server.start
  end
end


puts "=> Rails application started on http://#{OPTIONS[:ip]}:#{OPTIONS[:port]}"
SSLDispatchServlet.dispatch(OPTIONS)
