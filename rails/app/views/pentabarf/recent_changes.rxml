xml.div( :id => 'object-image' ) do
  xml.img( :src => image_path( 'icon-list-64x64.png' ), :class => 'object-image' )
end

xml.div( :id => 'data' ) do
  xml.fieldset do
    xml.ul do
      @changes.each do | changeset |
        xml.li do
          xml.text!( changeset.log_timestamp.strftime("%Y-%m-%d %H:%M:%S"))
          xml.a(changeset.name, :href=>url_for(:controller=>'pentabarf',:action=>:person,:id=>changeset.person_id))
          xml.ul do
            Log_transaction_involved_tables.select({:log_transaction_id=>changeset.log_transaction_id}).map(&:table_name).each do | table |
              klass = table.capitalize.constantize
              log_klass = "Log::#{table.capitalize}".constantize

                  log_klass.select(:log_transaction_id=>changeset.log_transaction_id).each do | change |

                    xml.li do
                      if klass.columns.key?(:conference_person_id)
                        cperson = Conference_person.select_single({:conference_person_id=>change.conference_person_id})
                        person = View_person.select_single({:person_id=>cperson.person_id})
                        link_title = person.name
                        link = url_for({:action=>:person,:id=>person.person_id})
                      elsif klass.columns.key?(:person_id)
                        person = View_person.select_single({:person_id=>change.person_id})
                        link_title = person.name
                        link = url_for({:action=>:person,:id=>person.person_id})
                      elsif klass.columns.key?(:event_id)
                        event = Event.select_single({:event_id=>change.event_id})
                        link_title = "#{event.title} #{event.subtitle}"
                        link = url_for({:action=>:event,:id=>event.event_id})
                      elsif klass.columns.key?(:conference_id)
                        conf = Conference.select_single({:conference_id=>change.conference_id})
                        link_title = conf.title
                        link = url_for({:action=>:conference,:id=>conf.conference_id})
                      else
                        raise "Could not determince change class for #{table}"
                      end

                      xml.a("#{link_title}:",{:href=>link})

                      columns = klass.columns.keys - klass.primary_keys - [:password]
                      xml.a({:href=>link}) do
                        if change.log_operation == "D" || change.log_operation == "I"
                          xml.b case change.log_operation
                            when "D" then "Deleted:"
                            when "I" then "New:"
                          end
                          values = []
                          columns.each do | column |
                            next unless change[column]
                            next if column.to_s.match(/_id$/)
                            values << "#{local('table::'+table.to_s+'::'+column.to_s)}: #{change[column]}"
                          end
                          xml.text! values.join(", ")
                        else
                          conditions = {:log_transaction_id=>{:lt=>change.log_transaction_id}}
                          klass.primary_keys.each do | pk | conditions[pk] = change[pk] end
                          old_value = log_klass.select(conditions,{:order=>Momomoto.desc(:log_transaction_id),:limit=>1})[0]
                          if old_value
                            values = []
                            columns.each do | column |
                              next if column.to_s.match(/_id$/)
                              if change[column] != old_value[column]
                                values << "#{local('table::'+table.to_s+'::'+column.to_s)}: #{old_value[column]} => #{change[column]}"
                              end
                            end
                            xml.text! values.join(", ")

                          else
                            xml.text! "Couldn't find previous value."
                          end
                        end
                      end
                    end
                  end

            end
          end
        end
      end
    end
  end
end

