xml.div( :id => 'object-image' ) do
  xml.img( :src => image_path( 'icon-list-64x64.png' ), :class => 'object-image' )
end

xml.div( :id => 'data' ) do
  xml.fieldset do
    xml.ul do
      @changes.each do | changeset |
        xml.li do
          xml.text!( changeset.log_timestamp.strftime("%Y-%m-%d %H:%M:%S"))
          xml.a(changeset.name, :href=>url_for(:controller=>'pentabarf',:action=>:person,:id=>changeset.person_id))
          xml.ul do
            Log_transaction_involved_tables.select({:log_transaction_id=>changeset.log_transaction_id}).map(&:table_name).each do | table |
              # FIXME ignoring some tables for now
              next if table.match(/^account_/) || table.match(/_localized$/) || [:custom_fields,:ui_message].member?( table.to_sym)
              klass = table.capitalize.constantize
              log_klass = "Log::#{table.capitalize}".constantize

                  log_klass.select(:log_transaction_id=>changeset.log_transaction_id).each do | change |

                    xml.li do
                      link, link_title = change_url( change )

                      values = []
                      columns = klass.columns.keys - klass.primary_keys - [:password,:eval_time]
                      columns = columns.map(&:to_s).sort.map(&:to_sym)
                      if change.log_operation == "D" || change.log_operation == "I"
                        columns.each do | column |
                          next unless change[column]
                          next if column.to_s.match(/_id$/)
                          values << "#{local('table::'+table.to_s+'::'+column.to_s)}: #{change[column]}"
                        end
                      else
                        conditions = {:log_transaction_id=>{:lt=>change.log_transaction_id}}
                        klass.primary_keys.each do | pk | conditions[pk] = change[pk] end
                        old_value = log_klass.select(conditions,{:order=>Momomoto.desc(:log_transaction_id),:limit=>1})[0]
                        if old_value
                          values = []
                          columns.each do | column |
                            next if column.to_s.match(/_id$/)
                            if change[column] != old_value[column]
                              values << "#{local('table::'+table.to_s+'::'+column.to_s)}: #{old_value[column]} => #{change[column]}"
                            end
                          end
                        else
                          values << "Couldn't find previous value."
                        end
                      end
                      next if values.length == 0
                      xml.a({:href=>link,:title=>table}) do
                        xml.text! link_title
                        xml.br

                        xml.b case change.log_operation
                          when "D" then "Deleted #{local(table)}:"
                          when "I" then "New #{local(table)}:"
                          when "U" then "#{local(table)}"
                        end
                        xml.text! values.join(", ")
                      end
                    end
                  end

            end
          end
        end
      end
    end
  end
end

